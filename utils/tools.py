import time  # Importation du module time pour mesurer le temps d'ex√©cution

def measure_time(func, *args, **kwargs):
    """
    Fonction pour mesurer le temps d'ex√©cution d'une fonction donn√©e.
    
    Param√®tres :
    func : fonction √† ex√©cuter
    *args : arguments positionnels de la fonction
    **kwargs : arguments nomm√©s de la fonction
    
    Retourne :
    - Le r√©sultat de la fonction
    - Le temps d'ex√©cution en secondes
    """
    start = time.perf_counter()  # D√©marre le chronom√®tre haute pr√©cision
    result = func(*args, **kwargs)  # Ex√©cute la fonction avec les arguments fournis
    end = time.perf_counter()  # Arr√™te le chronom√®tre
    return result, end - start  # Retourne le r√©sultat et le temps √©coul√©

def print_comparison_table(bt_result, bt_time, bf_result, bf_time):
    """
    Fonction pour afficher un tableau comparatif des performances entre deux m√©thodes.
    
    Param√®tres :
    bt_result : R√©sultat de la m√©thode Backtracking
    bt_time : Temps d'ex√©cution de la m√©thode Backtracking
    bf_result : R√©sultat de la m√©thode Force Brute
    bf_time : Temps d'ex√©cution de la m√©thode Force Brute
    """
    print("\nüìä Comparaison des performances :\n")  # Affiche un titre avec un emoji
    
    # Affichage de l'en-t√™te du tableau avec un formatage align√©
    print(f"{'M√©thode':<20}{'Succ√®s':<10}{'Temps (s)':<10}")  
    print("-" * 40)  # S√©parateur visuel
    
    # Affichage des r√©sultats des deux m√©thodes avec formatage
    print(f"{'Backtracking':<20}{str(bt_result):<10}{bt_time:.4f}")
    print(f"{'Force Brute':<20}{str(bf_result):<10}{bf_time:.4f}")
